import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns

def analysis_and_model_page():
    st.title("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["csv"])

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
                        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            df = df.drop(columns=['UDI', 'Product ID', 'TWF', 'HDF', 'PWF', 'OSF', 'RNF'], errors='ignore')

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Type
            le = LabelEncoder()
            df['Type'] = le.fit_transform(df['Type'])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if df.isnull().sum().any():
                st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –û–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
                df = df.dropna()
            
            #st.write("–î–æ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            # –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã '[' –∏ ']'
            df.columns = [col.replace('[', '').replace(']', '') for col in df.columns]
            # –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            #st.write("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            X = df.drop(columns=['Machine failure'])
            y = df['Machine failure']

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            scaler = StandardScaler()
            numerical_cols = ['Air temperature K', 'Process temperature K',
                              'Rotational speed rpm', 'Torque Nm', 'Tool wear min']
            X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            model_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
                                        ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å", "XGBoost"])

            if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
                if model_choice == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                    model = LogisticRegression(max_iter=1000)
                elif model_choice == "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å":
                    model = RandomForestClassifier(n_estimators=100, random_state=42)
                else:
                    from xgboost import XGBClassifier
                    model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                y_proba = model.predict_proba(X_test)[:, 1]

                acc = accuracy_score(y_test, y_pred)
                cm = confusion_matrix(y_test, y_pred)
                report = classification_report(y_test, y_pred, output_dict=False)
                auc = roc_auc_score(y_test, y_proba)

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
                st.write(f"**Accuracy**: {acc:.2f}")
                st.write(f"**ROC AUC**: {auc:.2f}")

                st.subheader("Classification Report")
                st.text(report)

                st.subheader("Confusion Matrix")
                fig, ax = plt.subplots()
                sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
                st.pyplot(fig)

                # ROC Curve
                fpr, tpr, _ = roc_curve(y_test, y_proba)
                fig_roc, ax_roc = plt.subplots()
                ax_roc.plot(fpr, tpr, label=f'{model_choice} (AUC = {auc:.2f})')
                ax_roc.plot([0, 1], [0, 1], 'k--')
                ax_roc.set_xlabel('False Positive Rate')
                ax_roc.set_ylabel('True Positive Rate')
                ax_roc.set_title('ROC Curve')
                ax_roc.legend()
                st.pyplot(fig_roc)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ session_state
                st.session_state.model = model
                st.session_state.scaler = scaler
                st.session_state.le = le

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
            st.subheader("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º")
            with st.form("prediction_form"):
                product_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ (L, M, H)", ['L', 'M', 'H'])
                air_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã [K]", value=300.0)
                process_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ [K]", value=310.0)
                rotational_speed = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è [rpm]", value=1500)
                torque = st.number_input("–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç [Nm]", value=40.0)
                tool_wear = st.number_input("–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ [–º–∏–Ω]", value=50)

                submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

                if submitted and 'model' in st.session_state:
                    model = st.session_state.model
                    scaler = st.session_state.scaler
                    le = st.session_state.le

                    input_data = pd.DataFrame({
                        'Type': [le.transform([product_type])[0]],
                        'Air temperature K': [air_temp],
                        'Process temperature K': [process_temp],
                        'Rotational speed rpm': [rotational_speed],
                        'Torque Nm': [torque],
                        'Tool wear min': [tool_wear]
                    })

                    input_data[numerical_cols] = scaler.transform(input_data[numerical_cols])
                    prediction = model.predict(input_data)[0]
                    probability = model.predict_proba(input_data)[0][1]

                    st.success(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {'–æ—Ç–∫–∞–∂–µ—Ç' if prediction == 1 else '–Ω–µ –æ—Ç–∫–∞–∂–µ—Ç'}")
                    st.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {probability:.2%}")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

analysis_and_model_page()